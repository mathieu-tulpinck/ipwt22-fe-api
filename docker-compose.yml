version: '3.4'

services:
  db:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress_dba
      MYSQL_PASSWORD: Student1
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
    networks:
      - frontend
    volumes:
      - db_data:/var/lib/mysql
  phpmyadmin:
    image: phpmyadmin:latest
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: Student1
    ports:
      - "8090:80" # Publishes the port to docker host in order to access db from browser.
    networks:
      - frontend
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025" # Publishes the port to docker host in order to access mailbox from browser.
    expose:
      - "1025"
    networks:
      - frontend
  # httpbin: # testing
  #   image: kennethreitz/httpbin:latest
  #   networks:
  #    - frontend
  #   environment:
  #     - GUNICORN_CMD_ARGS=${GUNICORN_CMD_ARGS}
  wordpress:
    depends_on:
      - db
      - mailhog
    build:
      context: ./wordpress
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: wordpress_dba
      WORDPRESS_DB_PASSWORD: Student1
      WORDPRESS_DB_NAME: wordpress
    networks:
      - frontend
    volumes:
      - wordpress_data:/var/www/html
  producer:
    depends_on:
      - wordpress
      # - rabbitmq # Not possible to depend on service defined in other file.
    build:
      context: ./Middleware
      dockerfile: ProducerDockerfile
    ports: # replace by expose
      - "5002:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - frontend
      - uuidmasterapi
      - rabbitmq
  consumer:
    depends_on:
      - wordpress
    build:
      context: ./Middleware
      dockerfile: ConsumerDockerfile
    # ports: # replace by expose
    #   - "5004:5000"
    # environment:
    #   - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - frontend
      - uuidmasterapi
      - rabbitmq
  # reverseproxy:
  #   depends_on:
  #     - producer
  #     - consumer
  #   build:
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8082:8082"
  #   networks:
  #     - frontend

networks:
  frontend:
    name: frontend
    driver: bridge
  rabbitmq:
    external: true
  uuidmasterapi:
    external: true

volumes:
  wordpress_data: {}
  db_data: {}

